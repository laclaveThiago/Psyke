<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

function understrap_remove_scripts() {
    wp_dequeue_style( 'understrap-styles' );
    wp_deregister_style( 'understrap-styles' );

    wp_dequeue_script( 'understrap-scripts' );
    wp_deregister_script( 'understrap-scripts' );

    // Removes the parent themes stylesheet and scripts from inc/enqueue.php
}
add_action( 'wp_enqueue_scripts', 'understrap_remove_scripts', 20 );

add_action( 'wp_enqueue_scripts', 'theme_enqueue_styles' );
function theme_enqueue_styles() {

	// Get the theme data
	$the_theme = wp_get_theme();
	wp_enqueue_style( 'slick-styles', get_stylesheet_directory_uri() . '/plugins/slick/slick.css', array(), $the_theme->get( 'Version' ) );
	wp_enqueue_style( 'slick-theme-styles', get_stylesheet_directory_uri() . '/plugins/slick/slick-theme.css', array(), $the_theme->get( 'Version' ) );
    wp_enqueue_style( 'child-understrap-styles', get_stylesheet_directory_uri() . '/css/child-theme.min.css', array(), $the_theme->get( 'Version' ) );
	
    wp_enqueue_script( 'jquery');
    wp_enqueue_script( 'child-understrap-scripts', get_stylesheet_directory_uri() . '/js/child-theme.min.js', array(), $the_theme->get( 'Version' ), true );
	wp_enqueue_script( 'slick-scripts', get_stylesheet_directory_uri() . '/plugins/slick/slick.min.js', array(), $the_theme->get( 'Version' ), true );
	wp_enqueue_script( 'typed-scripts', get_stylesheet_directory_uri() . '/plugins/typed/typed.min.js', array(), $the_theme->get( 'Version' ), true );
	wp_enqueue_script( 'waypoints-scripts', get_stylesheet_directory_uri() . '/plugins/waypoints/jquery.waypoints.min.js', array(), $the_theme->get( 'Version' ), true );
	wp_enqueue_script( 'waypoints-debug-scripts', get_stylesheet_directory_uri() . '/plugins/waypoints/waypoints.debug.js', array(), $the_theme->get( 'Version' ), true );

	
	

	wp_enqueue_script( 'gsap', get_stylesheet_directory_uri() . '/js/gsap/gsap.min.js', array(), $the_theme->get( 'Version' ), true );
	wp_enqueue_script( 'gsap-scrollTop', get_stylesheet_directory_uri() . '/js/gsap/ScrollToPlugin.min.js', array(), $the_theme->get( 'Version' ), true );
	wp_enqueue_script( 'gsap-scroll-trigger', get_stylesheet_directory_uri() . '/js/gsap/ScrollTrigger.min.js', array(), $the_theme->get( 'Version' ), true );

	
	wp_enqueue_script( 'psyke-scripts', get_stylesheet_directory_uri() . '/js/frontend.js', array(), $the_theme->get( 'Version' ), true );
    if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {
        wp_enqueue_script( 'comment-reply' );
    }
}

function add_child_theme_textdomain() {
    load_child_theme_textdomain( 'understrap-child', get_stylesheet_directory() . '/languages' );
}
add_action( 'after_setup_theme', 'add_child_theme_textdomain' );

add_action( 'after_setup_theme', 'register_menu_footer' );
function register_menu_footer() {
    register_nav_menu( 'menu_footer_footer', __( 'Menu pie', 'understrap-child' ) );
}

//widget areas
function custom_widgets_init() {
 
    register_sidebar( array(
        'name'          => 'Introdución - Meditaciones',
        'id'            => 'intro-meditation',
        'before_widget' => '<div class="intro-meditation">',
        'after_widget'  => '</div>',
        'before_title'  => '<h4 class="title-meditation">',
        'after_title'   => '</h4>',
    ) );
 
}
add_action( 'widgets_init', 'custom_widgets_init' );


/*
* Make Private Posts visible to Subscribers
* Typically only visible to admin or editor
*/
function whitespider_private_posts_subscribers(){
    $subRole = get_role( 'subscriber' );
    $subRole->add_cap( 'read_private_posts' );
    $subRole->add_cap( 'read_private_pages' );
}
add_action( 'init', 'whitespider_private_posts_subscribers' );


/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * ¿Mostrar testimonios? = get_post_meta( get_the_ID(), 'configurar_elementos_de_la_pagina_mostrar-testimonios', true )
 * ¿Mostrar tratamientos? = get_post_meta( get_the_ID(), 'configurar_elementos_de_la_pagina_mostrar-tratamientos', true )
 * ¿Mostrar contacto? = get_post_meta( get_the_ID(), 'configurar_elementos_de_la_pagina_mostrar-contacto', true )
 * Color de fondo = get_post_meta( get_the_ID(), 'configurar_elementos_de_la_pagina_color-de-fondo', true )
 * Color de fondo = get_post_meta( get_the_ID(), 'configurar_elementos_de_la_pagina_color-blob', true )
 * Contenido de la portada = get_post_meta( get_the_ID(), 'configurar_elementos_de_la_pagina_contenido-de-la-portada', true )
 */
class psyke {
	private $config = '{
        "title":"Configurar elementos de la p\u00e1gina",
        "prefix":"configurar_elementos_de_la_pagina_",
        "domain":"psyke",
        "class_name":"psyke",
        "post-type":["page"],
        "context":"normal",
        "priority":"default",
        "fields":[{
            "type":"checkbox",
            "label":"\u00bfMostrar Posts - Blog?",
            "id":"configurar_elementos_de_la_pagina_mostrar-posts"
        },
		{
            "type":"checkbox",
            "label":"\u00bfMostrar Posts - Meditaciones?",
            "id":"configurar_elementos_de_la_pagina_mostrar-meditaciones"
        },
        {
            "type":"checkbox",
            "label":"\u00bfMostrar contacto?",
            "id":"configurar_elementos_de_la_pagina_mostrar-contacto"
        },
        {
            "type":"editor",
            "label":"Contenido de la portada",
            "media-buttons":"1",
            "id":"configurar_elementos_de_la_pagina_contenido-de-la-portada"
        }]
    }';

	public function __construct() {
		$this->config = json_decode( $this->config, true );
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'admin_enqueue_scripts', [ $this, 'admin_enqueue_scripts' ] );
		add_action( 'admin_head', [ $this, 'admin_head' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function add_meta_boxes() {
		foreach ( $this->config['post-type'] as $screen ) {
			add_meta_box(
				sanitize_title( $this->config['title'] ),
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function admin_enqueue_scripts() {
		global $typenow;
		if ( in_array( $typenow, $this->config['post-type'] ) ) {
			wp_enqueue_script( 'wp-color-picker' );
			wp_enqueue_style( 'wp-color-picker' );
		}
	}

	public function admin_head() {
		global $typenow;
		if ( in_array( $typenow, $this->config['post-type'] ) ) {
			?><script>
				jQuery.noConflict();
				(function($) {
					$(function() {
						$('.rwp-color-picker').wpColorPicker();
					});
				})(jQuery);
			</script><?php
			?><?php
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				case 'checkbox':
					update_post_meta( $post_id, $field['id'], isset( $_POST[ $field['id'] ] ) ? $_POST[ $field['id'] ] : '' );
					break;
				case 'editor':
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = wp_filter_post_kses( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
					break;
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		$this->fields_table();
	}

	private function fields_table() {
		?><table class="form-table" role="presentation">
			<tbody><?php
				foreach ( $this->config['fields'] as $field ) {
					?><tr>
						<th scope="row"><?php $this->label( $field ); ?></th>
						<td><?php $this->field( $field ); ?></td>
					</tr><?php
				}
			?></tbody>
		</table><?php
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			case 'editor':
				echo '<div class="">' . $field['label'] . '</div>';
				break;
			default:
				printf(
					'<label class="" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			case 'checkbox':
				$this->checkbox( $field );
				break;
			case 'editor':
				$this->editor( $field );
				break;
			default:
				$this->input( $field );
		}
	}

	private function checkbox( $field ) {
		printf(
			'<label class="rwp-checkbox-label"><input %s id="%s" name="%s" type="checkbox"> %s</label>',
			$this->checked( $field ),
			$field['id'], $field['id'],
			isset( $field['description'] ) ? $field['description'] : ''
		);
	}

	private function editor( $field ) {
		wp_editor( $this->value( $field ), $field['id'], [
			'wpautop' => isset( $field['wpautop'] ) ? true : false,
			'media_buttons' => isset( $field['media-buttons'] ) ? true : false,
			'textarea_name' => $field['id'],
			'textarea_rows' => isset( $field['rows'] ) ? isset( $field['rows'] ) : 20,
			'teeny' => isset( $field['teeny'] ) ? true : false
		] );
	}

	private function input( $field ) {
		if ( isset( $field['color-picker'] ) ) {
			$field['class'] = 'rwp-color-picker';
		}
		printf(
			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}
		return str_replace( '\u0027', "'", $value );
	}

	private function checked( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
			if ( $value === 'on' ) {
				return 'checked';
			}
			return '';
		} else if ( isset( $field['checked'] ) ) {
			return 'checked';
		}
		return '';
	}
}
new psyke;
